/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package mbot_lcm_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class mbot_state_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public float x;
    public float y;
    public float theta;
    public float tb_angles[];
    public float accel[];
    public float gyro[];
    public float mag[];
    public float temp;
    public float last_yaw;
    public int left_encoder_delta;
    public int right_encoder_delta;
    public long left_encoder_total;
    public long right_encoder_total;
    public float fwd_velocity;
    public float turn_velocity;
    public float left_velocity;
    public float right_velocity;
    public float left_cmd;
    public float right_cmd;
 
    public mbot_state_t()
    {
        tb_angles = new float[3];
        accel = new float[3];
        gyro = new float[3];
        mag = new float[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x48b39be3d1ca37e2L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(mbot_lcm_msgs.mbot_state_t.class))
            return 0L;
 
        classes.add(mbot_lcm_msgs.mbot_state_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeFloat(this.x); 
 
        outs.writeFloat(this.y); 
 
        outs.writeFloat(this.theta); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.tb_angles[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.accel[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.gyro[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.mag[a]); 
        }
 
        outs.writeFloat(this.temp); 
 
        outs.writeFloat(this.last_yaw); 
 
        outs.writeInt(this.left_encoder_delta); 
 
        outs.writeInt(this.right_encoder_delta); 
 
        outs.writeLong(this.left_encoder_total); 
 
        outs.writeLong(this.right_encoder_total); 
 
        outs.writeFloat(this.fwd_velocity); 
 
        outs.writeFloat(this.turn_velocity); 
 
        outs.writeFloat(this.left_velocity); 
 
        outs.writeFloat(this.right_velocity); 
 
        outs.writeFloat(this.left_cmd); 
 
        outs.writeFloat(this.right_cmd); 
 
    }
 
    public mbot_state_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public mbot_state_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static mbot_lcm_msgs.mbot_state_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        mbot_lcm_msgs.mbot_state_t o = new mbot_lcm_msgs.mbot_state_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.x = ins.readFloat();
 
        this.y = ins.readFloat();
 
        this.theta = ins.readFloat();
 
        this.tb_angles = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.tb_angles[a] = ins.readFloat();
        }
 
        this.accel = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.accel[a] = ins.readFloat();
        }
 
        this.gyro = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.gyro[a] = ins.readFloat();
        }
 
        this.mag = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.mag[a] = ins.readFloat();
        }
 
        this.temp = ins.readFloat();
 
        this.last_yaw = ins.readFloat();
 
        this.left_encoder_delta = ins.readInt();
 
        this.right_encoder_delta = ins.readInt();
 
        this.left_encoder_total = ins.readLong();
 
        this.right_encoder_total = ins.readLong();
 
        this.fwd_velocity = ins.readFloat();
 
        this.turn_velocity = ins.readFloat();
 
        this.left_velocity = ins.readFloat();
 
        this.right_velocity = ins.readFloat();
 
        this.left_cmd = ins.readFloat();
 
        this.right_cmd = ins.readFloat();
 
    }
 
    public mbot_lcm_msgs.mbot_state_t copy()
    {
        mbot_lcm_msgs.mbot_state_t outobj = new mbot_lcm_msgs.mbot_state_t();
        outobj.utime = this.utime;
 
        outobj.x = this.x;
 
        outobj.y = this.y;
 
        outobj.theta = this.theta;
 
        outobj.tb_angles = new float[(int) 3];
        System.arraycopy(this.tb_angles, 0, outobj.tb_angles, 0, 3); 
        outobj.accel = new float[(int) 3];
        System.arraycopy(this.accel, 0, outobj.accel, 0, 3); 
        outobj.gyro = new float[(int) 3];
        System.arraycopy(this.gyro, 0, outobj.gyro, 0, 3); 
        outobj.mag = new float[(int) 3];
        System.arraycopy(this.mag, 0, outobj.mag, 0, 3); 
        outobj.temp = this.temp;
 
        outobj.last_yaw = this.last_yaw;
 
        outobj.left_encoder_delta = this.left_encoder_delta;
 
        outobj.right_encoder_delta = this.right_encoder_delta;
 
        outobj.left_encoder_total = this.left_encoder_total;
 
        outobj.right_encoder_total = this.right_encoder_total;
 
        outobj.fwd_velocity = this.fwd_velocity;
 
        outobj.turn_velocity = this.turn_velocity;
 
        outobj.left_velocity = this.left_velocity;
 
        outobj.right_velocity = this.right_velocity;
 
        outobj.left_cmd = this.left_cmd;
 
        outobj.right_cmd = this.right_cmd;
 
        return outobj;
    }
 
}

