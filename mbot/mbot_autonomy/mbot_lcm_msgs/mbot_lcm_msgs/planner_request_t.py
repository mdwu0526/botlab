"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mbot_lcm_msgs.pose_xyt_t

class planner_request_t(object):
    __slots__ = ["utime", "goal", "require_plan"]

    __typenames__ = ["int64_t", "mbot_lcm_msgs.pose_xyt_t", "boolean"]

    __dimensions__ = [None, None, None]

    def __init__(self):
        self.utime = 0
        self.goal = mbot_lcm_msgs.pose_xyt_t()
        self.require_plan = False

    def encode(self):
        buf = BytesIO()
        buf.write(planner_request_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        assert self.goal._get_packed_fingerprint() == mbot_lcm_msgs.pose_xyt_t._get_packed_fingerprint()
        self.goal._encode_one(buf)
        buf.write(struct.pack(">b", self.require_plan))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != planner_request_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return planner_request_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = planner_request_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        self.goal = mbot_lcm_msgs.pose_xyt_t._decode_one(buf)
        self.require_plan = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if planner_request_t in parents: return 0
        newparents = parents + [planner_request_t]
        tmphash = (0x5942e2809bf67451+ mbot_lcm_msgs.pose_xyt_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if planner_request_t._packed_fingerprint is None:
            planner_request_t._packed_fingerprint = struct.pack(">Q", planner_request_t._get_hash_recursive([]))
        return planner_request_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", planner_request_t._get_packed_fingerprint())[0]

