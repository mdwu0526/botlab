/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package mbot_lcm_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class joystick_t implements lcm.lcm.LCMEncodable
{
    public long timestamp;
    public float left_analog_X;
    public float left_analog_Y;
    public float right_analog_X;
    public float right_analog_Y;
    public float right_trigger;
    public float left_trigger;
    public float dpad_X;
    public float dpad_Y;
    public byte button_A;
    public byte button_B;
    public byte button_2;
    public byte button_X;
    public byte button_Y;
    public byte button_5;
    public byte button_l1;
    public byte button_r1;
    public byte button_l2;
    public byte button_r2;
    public byte button_select;
    public byte button_start;
    public byte button_12;
    public byte button_left_analog;
    public byte button_right_analog;
    public byte button_15;
 
    public joystick_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x411d5cfa5f4fa383L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(mbot_lcm_msgs.joystick_t.class))
            return 0L;
 
        classes.add(mbot_lcm_msgs.joystick_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.timestamp); 
 
        outs.writeFloat(this.left_analog_X); 
 
        outs.writeFloat(this.left_analog_Y); 
 
        outs.writeFloat(this.right_analog_X); 
 
        outs.writeFloat(this.right_analog_Y); 
 
        outs.writeFloat(this.right_trigger); 
 
        outs.writeFloat(this.left_trigger); 
 
        outs.writeFloat(this.dpad_X); 
 
        outs.writeFloat(this.dpad_Y); 
 
        outs.writeByte(this.button_A); 
 
        outs.writeByte(this.button_B); 
 
        outs.writeByte(this.button_2); 
 
        outs.writeByte(this.button_X); 
 
        outs.writeByte(this.button_Y); 
 
        outs.writeByte(this.button_5); 
 
        outs.writeByte(this.button_l1); 
 
        outs.writeByte(this.button_r1); 
 
        outs.writeByte(this.button_l2); 
 
        outs.writeByte(this.button_r2); 
 
        outs.writeByte(this.button_select); 
 
        outs.writeByte(this.button_start); 
 
        outs.writeByte(this.button_12); 
 
        outs.writeByte(this.button_left_analog); 
 
        outs.writeByte(this.button_right_analog); 
 
        outs.writeByte(this.button_15); 
 
    }
 
    public joystick_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public joystick_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static mbot_lcm_msgs.joystick_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        mbot_lcm_msgs.joystick_t o = new mbot_lcm_msgs.joystick_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.timestamp = ins.readLong();
 
        this.left_analog_X = ins.readFloat();
 
        this.left_analog_Y = ins.readFloat();
 
        this.right_analog_X = ins.readFloat();
 
        this.right_analog_Y = ins.readFloat();
 
        this.right_trigger = ins.readFloat();
 
        this.left_trigger = ins.readFloat();
 
        this.dpad_X = ins.readFloat();
 
        this.dpad_Y = ins.readFloat();
 
        this.button_A = ins.readByte();
 
        this.button_B = ins.readByte();
 
        this.button_2 = ins.readByte();
 
        this.button_X = ins.readByte();
 
        this.button_Y = ins.readByte();
 
        this.button_5 = ins.readByte();
 
        this.button_l1 = ins.readByte();
 
        this.button_r1 = ins.readByte();
 
        this.button_l2 = ins.readByte();
 
        this.button_r2 = ins.readByte();
 
        this.button_select = ins.readByte();
 
        this.button_start = ins.readByte();
 
        this.button_12 = ins.readByte();
 
        this.button_left_analog = ins.readByte();
 
        this.button_right_analog = ins.readByte();
 
        this.button_15 = ins.readByte();
 
    }
 
    public mbot_lcm_msgs.joystick_t copy()
    {
        mbot_lcm_msgs.joystick_t outobj = new mbot_lcm_msgs.joystick_t();
        outobj.timestamp = this.timestamp;
 
        outobj.left_analog_X = this.left_analog_X;
 
        outobj.left_analog_Y = this.left_analog_Y;
 
        outobj.right_analog_X = this.right_analog_X;
 
        outobj.right_analog_Y = this.right_analog_Y;
 
        outobj.right_trigger = this.right_trigger;
 
        outobj.left_trigger = this.left_trigger;
 
        outobj.dpad_X = this.dpad_X;
 
        outobj.dpad_Y = this.dpad_Y;
 
        outobj.button_A = this.button_A;
 
        outobj.button_B = this.button_B;
 
        outobj.button_2 = this.button_2;
 
        outobj.button_X = this.button_X;
 
        outobj.button_Y = this.button_Y;
 
        outobj.button_5 = this.button_5;
 
        outobj.button_l1 = this.button_l1;
 
        outobj.button_r1 = this.button_r1;
 
        outobj.button_l2 = this.button_l2;
 
        outobj.button_r2 = this.button_r2;
 
        outobj.button_select = this.button_select;
 
        outobj.button_start = this.button_start;
 
        outobj.button_12 = this.button_12;
 
        outobj.button_left_analog = this.button_left_analog;
 
        outobj.button_right_analog = this.button_right_analog;
 
        outobj.button_15 = this.button_15;
 
        return outobj;
    }
 
}

