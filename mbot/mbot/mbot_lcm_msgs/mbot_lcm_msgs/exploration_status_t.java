/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package mbot_lcm_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class exploration_status_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public int team_number;
    public byte state;
    public byte status;
 
    public exploration_status_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x46cc0600966c2be3L;
 
    public static final byte STATE_INITIALIZING = (byte) 0;
    public static final byte STATE_EXPLORING_MAP = (byte) 1;
    public static final byte STATE_RETURNING_HOME = (byte) 2;
    public static final byte STATE_COMPLETED_EXPLORATION = (byte) 3;
    public static final byte STATE_FAILED_EXPLORATION = (byte) 4;
    public static final byte STATUS_IN_PROGRESS = (byte) 0;
    public static final byte STATUS_COMPLETE = (byte) 1;
    public static final byte STATUS_FAILED = (byte) 2;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(mbot_lcm_msgs.exploration_status_t.class))
            return 0L;
 
        classes.add(mbot_lcm_msgs.exploration_status_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeInt(this.team_number); 
 
        outs.writeByte(this.state); 
 
        outs.writeByte(this.status); 
 
    }
 
    public exploration_status_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public exploration_status_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static mbot_lcm_msgs.exploration_status_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        mbot_lcm_msgs.exploration_status_t o = new mbot_lcm_msgs.exploration_status_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.team_number = ins.readInt();
 
        this.state = ins.readByte();
 
        this.status = ins.readByte();
 
    }
 
    public mbot_lcm_msgs.exploration_status_t copy()
    {
        mbot_lcm_msgs.exploration_status_t outobj = new mbot_lcm_msgs.exploration_status_t();
        outobj.utime = this.utime;
 
        outobj.team_number = this.team_number;
 
        outobj.state = this.state;
 
        outobj.status = this.status;
 
        return outobj;
    }
 
}

