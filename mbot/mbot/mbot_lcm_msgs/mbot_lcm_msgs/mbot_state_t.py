"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class mbot_state_t(object):
    __slots__ = ["utime", "x", "y", "theta", "tb_angles", "accel", "gyro", "mag", "temp", "last_yaw", "left_encoder_delta", "right_encoder_delta", "left_encoder_total", "right_encoder_total", "fwd_velocity", "turn_velocity", "left_velocity", "right_velocity", "left_cmd", "right_cmd"]

    __typenames__ = ["int64_t", "float", "float", "float", "float", "float", "float", "float", "float", "float", "int32_t", "int32_t", "int64_t", "int64_t", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [None, None, None, None, [3], [3], [3], [3], None, None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.utime = 0
        self.x = 0.0
        self.y = 0.0
        self.theta = 0.0
        self.tb_angles = [ 0.0 for dim0 in range(3) ]
        self.accel = [ 0.0 for dim0 in range(3) ]
        self.gyro = [ 0.0 for dim0 in range(3) ]
        self.mag = [ 0.0 for dim0 in range(3) ]
        self.temp = 0.0
        self.last_yaw = 0.0
        self.left_encoder_delta = 0
        self.right_encoder_delta = 0
        self.left_encoder_total = 0
        self.right_encoder_total = 0
        self.fwd_velocity = 0.0
        self.turn_velocity = 0.0
        self.left_velocity = 0.0
        self.right_velocity = 0.0
        self.left_cmd = 0.0
        self.right_cmd = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(mbot_state_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qfff", self.utime, self.x, self.y, self.theta))
        buf.write(struct.pack('>3f', *self.tb_angles[:3]))
        buf.write(struct.pack('>3f', *self.accel[:3]))
        buf.write(struct.pack('>3f', *self.gyro[:3]))
        buf.write(struct.pack('>3f', *self.mag[:3]))
        buf.write(struct.pack(">ffiiqqffffff", self.temp, self.last_yaw, self.left_encoder_delta, self.right_encoder_delta, self.left_encoder_total, self.right_encoder_total, self.fwd_velocity, self.turn_velocity, self.left_velocity, self.right_velocity, self.left_cmd, self.right_cmd))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != mbot_state_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return mbot_state_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = mbot_state_t()
        self.utime, self.x, self.y, self.theta = struct.unpack(">qfff", buf.read(20))
        self.tb_angles = struct.unpack('>3f', buf.read(12))
        self.accel = struct.unpack('>3f', buf.read(12))
        self.gyro = struct.unpack('>3f', buf.read(12))
        self.mag = struct.unpack('>3f', buf.read(12))
        self.temp, self.last_yaw, self.left_encoder_delta, self.right_encoder_delta, self.left_encoder_total, self.right_encoder_total, self.fwd_velocity, self.turn_velocity, self.left_velocity, self.right_velocity, self.left_cmd, self.right_cmd = struct.unpack(">ffiiqqffffff", buf.read(56))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if mbot_state_t in parents: return 0
        tmphash = (0x48b39be3d1ca37e2) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if mbot_state_t._packed_fingerprint is None:
            mbot_state_t._packed_fingerprint = struct.pack(">Q", mbot_state_t._get_hash_recursive([]))
        return mbot_state_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", mbot_state_t._get_packed_fingerprint())[0]

